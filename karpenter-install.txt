#---------------------------------------------------------------------------
# PodDisruptionBudget (PDB) マニフェストファイルの作成
#---------------------------------------------------------------------------
# KubernetesのPodDisruptionBudget (PDB) リソースを定義するYAMLファイルを作成するスクリプト。
# PDBは、ノードメンテナンスなどの自発的な中断時におけるアプリケーション可用性の確保。
# 同時に停止できるPodの数を制限するKubernetesの機能。
#---------------------------------------------------------------------------
# ここで作成されるPDBは、KarpenterコントローラーのPodが常に一定数以上稼働することを保証。
# オートスケーリング機能の中断防止に寄与。
#---------------------------------------------------------------------------
# - リソースの種類: PodDisruptionBudget (policy/v1 APIグループ)
# - 名前: karpenter
# - 名前空間: karpenter
# - 制限: 同時に利用不可となるKarpenter Podの最大数1 (maxUnavailable: 1)
# - 対象Pod: 'app.kubernetes.io/name: karpenter' および 'app.kubernetes.io/instance: karpenter'
#           ラベルを持つPod
#---------------------------------------------------------------------------

cat << 'EOF' > poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: karpenter
  namespace: karpenter
  labels:
    helm.sh/chart: karpenter-1.5.0
    app.kubernetes.io/name: karpenter
    app.kubernetes.io/instance: karpenter
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: karpenter
      app.kubernetes.io/instance: karpenter
EOF

kubectl delete -f poddisruptionbudget.yaml || true
kubectl apply -f poddisruptionbudget.yaml
kubectl get pdb karpenter -n karpenter

#---------------------------------------------------------------------------
# ServiceAccount マニフェストファイルの作成
#---------------------------------------------------------------------------
# KubernetesのServiceAccountリソースを定義するYAMLファイルを作成するスクリプト。
# ServiceAccountは、Kubernetesクラスター内で実行されるPodにIDを提供。
# このIDは、PodがKubernetes APIやAWS APIと連携する際の認証情報として利用。
# ここで作成されるServiceAccountは、KarpenterコントローラーがAWSリソースを管理するためのIAMロールと紐付け。
# IRSA（IAM Roles for Service Accounts）を通じて、PodがAWS APIに安全にアクセス可能。
#---------------------------------------------------------------------------
# - リソースの種類: ServiceAccount (v1 APIグループ)
# - 名前: karpenter
# - 名前空間: karpenter
# - アノテーション: AWS IAMロールARNとの紐付け (eks.amazonaws.com/role-arn)
# - トークン自動マウント: 無効 (automountServiceAccountToken: false) - IRSA利用のため
#---------------------------------------------------------------------------

cat << 'EOF' > serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: karpenter
  namespace: karpenter
  labels:
    helm.sh/chart: karpenter-1.5.0
    app.kubernetes.io/name: karpenter
    app.kubernetes.io/instance: karpenter
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::644932501454:role/dev-ws-devops-eks-karpenter
automountServiceAccountToken: false
EOF

kubectl delete -f serviceaccount.yaml || true
kubectl apply -f serviceaccount.yaml
kubectl get sa karpenter -n karpenter

#---------------------------------------------------------------------------
# ClusterRole (karpenter-admin) マニフェストファイルの作成
#---------------------------------------------------------------------------
# KubernetesのClusterRoleリソースを定義するYAMLファイルを作成するスクリプト。
# このClusterRoleは、Karpenterのカスタムリソース（NodePools、NodeClaims、EC2NodeClasses）に対する
# 管理者権限を集約する目的。
# rbac.authorization.k8s.io/aggregate-to-admin: "true" ラベルにより、
# 既存の"admin" ClusterRoleに自動的に集約される設定。
#---------------------------------------------------------------------------
# - リソースの種類: ClusterRole (rbac.authorization.k8s.io/v1 APIグループ)
# - 名前: karpenter-admin
# - 権限: karpenter.sh および karpenter.k8s.aws APIグループの各種リソースに対する
#         取得、一覧表示、監視、作成、削除、パッチ適用権限
#---------------------------------------------------------------------------

cat << 'EOF' > aggregate-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: karpenter-admin
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    helm.sh/chart: karpenter-1.5.0
    app.kubernetes.io/name: karpenter
    app.kubernetes.io/instance: karpenter
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: ["karpenter.sh"]
    resources: ["nodepools", "nodepools/status", "nodeclaims", "nodeclaims/status"]      
    verbs: ["get", "list", "watch", "create", "delete", "patch"]
  - apiGroups: ["karpenter.k8s.aws"]
    resources: ["ec2nodeclasses"]
    verbs: ["get", "list", "watch", "create", "delete", "patch"]
EOF

kubectl delete -f aggregate-clusterrole.yaml || true
kubectl apply -f aggregate-clusterrole.yaml
kubectl get clusterrole karpenter-admin

#---------------------------------------------------------------------------
# ClusterRole (karpenter-core) マニフェストファイルの作成
#---------------------------------------------------------------------------
# KubernetesのClusterRoleリソースを定義するYAMLファイルを作成するスクリプト。
# このClusterRoleは、KarpenterコントローラーがKubernetesクラスター内で
# ノードのプロビジョニング、Podのスケジューリング、ノードの削除などの
# 主要な自動化機能を実現するために必要なコア権限。
#---------------------------------------------------------------------------
# - リソースの種類: ClusterRole (rbac.authorization.k8s.io/v1 APIグループ)
# - 名前: karpenter-core
# - 権限: Pods、Nodes、Events、StorageClasses、DaemonSetsなど、
#         Karpenterの動作に必要な各種Kubernetesリソースに対する
#         取得、一覧表示、監視、作成、更新、パッチ適用、削除権限
#---------------------------------------------------------------------------

cat << 'EOF' > clusterrole-core.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: karpenter-core
  labels:
    helm.sh/chart: karpenter-1.5.0
    app.kubernetes.io/name: karpenter
    app.kubernetes.io/instance: karpenter
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
rules:
  # Read
  - apiGroups: ["karpenter.sh"]
    resources: ["nodepools", "nodepools/status", "nodeclaims", "nodeclaims/status"]      
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods", "nodes", "persistentvolumes", "persistentvolumeclaims", "replicationcontrollers", "namespaces"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses", "csinodes", "volumeattachments"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["apps"]
    resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
    verbs: ["list", "watch"]
  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", list, "watch"]
  # Write
  - apiGroups: ["karpenter.sh"]
    resources: ["nodeclaims", "nodeclaims/status"]
    verbs: ["create", "delete", "update", "patch"]
  - apiGroups: ["karpenter.sh"]
    resources: ["nodepools", "nodepools/status"]
    verbs: ["update", "patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["patch", "delete", "update"]
  - apiGroups: [""]
    resources: ["pods/eviction"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["delete"]
EOF

kubectl delete -f clusterrole-core.yaml || true
kubectl apply -f clusterrole-core.yaml
kubectl get clusterrole karpenter-core

#---------------------------------------------------------------------------
# ClusterRole (karpenter) および ClusterRoleBinding (karpenter-core) マニフェストファイルの作成
#---------------------------------------------------------------------------
# KubernetesのClusterRoleリソースを定義するYAMLファイルを作成するスクリプト。
# このClusterRoleは、KarpenterがAWS固有のKarpenterリソース（EC2NodeClasses）と
# 連携するために必要な権限を定義。
#---------------------------------------------------------------------------
# - リソースの種類: ClusterRole (rbac.authorization.k8s.io/v1 APIグループ)
# - 名前: karpenter
# - 権限: karpenter.k8s.aws APIグループのEC2NodeClassesに対する
#         取得、一覧表示、監視、パッチ適用、更新権限
#---------------------------------------------------------------------------
# KubernetesのClusterRoleBindingリソースを定義するYAMLファイルを作成するスクリプト。
# これは、ServiceAccount "karpenter" に ClusterRole "karpenter-core" の権限を付与。
# KarpenterコントローラーがKubernetesクラスター内で必要な操作を実行するための役割バインディング。
#---------------------------------------------------------------------------
# - リソースの種類: ClusterRoleBinding (rbac.authorization.k8s.io/v1 APIグループ)
# - 名前: karpenter-core
# - 役割参照: ClusterRole "karpenter-core"
# - 主体: ServiceAccount "karpenter" (名前空間: karpenter)
#---------------------------------------------------------------------------

cat << 'EOF' > clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: karpenter
  labels:
    helm.sh/chart: karpenter-1.5.0
    app.kubernetes.io/name: karpenter
    app.kubernetes.io/instance: karpenter
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
rules:
  # Read
  - apiGroups: ["karpenter.k8s.aws"]
    resources: ["ec2nodeclasses"]
    verbs: ["get", "list", "watch"]
  # Write
  - apiGroups: ["karpenter.k8s.aws"]
    resources: ["ec2nodeclasses", "ec2nodeclasses/status"]
    verbs: ["patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: karpenter-core
  labels:
    helm.sh/chart: karpenter-1.5.0
    app.kubernetes.io/name: karpenter
    app.kubernetes.io/instance: karpenter
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: karpenter-core
subjects:
  - kind: ServiceAccount
    name: karpenter
    namespace: karpenter
EOF

kubectl delete -f clusterrole.yaml || true
kubectl apply -f clusterrole.yaml
kubectl get clusterrole karpenter
kubectl get clusterrolebinding karpenter-core

#---------------------------------------------------------------------------
# ClusterRoleBinding (karpenter) および Role (karpenter, karpenter-dns) マニフェストファイルの作成
#---------------------------------------------------------------------------
# KubernetesのClusterRoleBindingリソースを定義するYAMLファイルを作成するスクリプト。
# これは、ServiceAccount "karpenter" に ClusterRole "karpenter" の権限を付与。
# KarpenterがAWS固有のKarpenterリソースを操作するための役割バインディング。
#---------------------------------------------------------------------------
# - リソースの種類: ClusterRoleBinding (rbac.authorization.k8s.io/v1 APIグループ)
# - 名前: karpenter
# - 役割参照: ClusterRole "karpenter"
# - 主体: ServiceAccount "karpenter" (名前空間: karpenter)
#---------------------------------------------------------------------------
# KubernetesのRoleリソースを定義するYAMLファイルを作成するスクリプト。
# このRoleは、Karpenterコントローラーがリーダー選出メカニズムを管理するために必要な権限を定義。
#---------------------------------------------------------------------------
# - リソースの種類: Role (rbac.authorization.k8s.io/v1 APIグループ)
# - 名前: karpenter
# - 名前空間: karpenter
# - 権限: coordination.k8s.io APIグループのleasesリソースに対する
#         取得、監視、パッチ適用、更新、作成権限（特にリーダー選出リース用）
#---------------------------------------------------------------------------
# KubernetesのRoleリソースを定義するYAMLファイルを作成するスクリプト。
# このRoleは、Karpenterがkube-system名前空間内のDNSサービスと連携するために必要な権限を定義。
#---------------------------------------------------------------------------
# - リソースの種類: Role (rbac.authorization.k8s.io/v1 APIグループ)
# - 名前: karpenter-dns
# - 名前空間: kube-system
# - 権限: "" (コア) APIグループのkube-dnsサービスに対する取得権限
#---------------------------------------------------------------------------

cat << 'EOF' > clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: karpenter
  labels:
    helm.sh/chart: karpenter-1.5.0
    app.kubernetes.io/name: karpenter
    app.kubernetes.io/instance: karpenter
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: karpenter
subjects:
  - kind: ServiceAccount
    name: karpenter
    namespace: karpenter
---
# Source: karpenter/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: karpenter
  namespace: karpenter
  labels:
    helm.sh/chart: karpenter-1.5.0
    app.kubernetes.io/name: karpenter
    app.kubernetes.io/instance: karpenter
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
rules:
  # Read
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch"]
  # Write
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["patch", "update"]
    resourceNames:
      - "karpenter-leader-election"
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: karpenter-dns
  namespace: kube-system
  labels:
    helm.sh/chart: karpenter-1.5.0
    app.kubernetes.io/name: karpenter
    app.kubernetes.io/instance: karpenter
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
rules:
  # Read
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["kube-dns"]
    verbs: ["get"]
EOF

kubectl delete -f clusterrole.yaml || true
kubectl apply -f clusterrole.yaml
kubectl get clusterrolebinding karpenter
kubectl get role karpenter -n karpenter
kubectl get role karpenter-dns -n kube-system

#---------------------------------------------------------------------------
# RoleBinding (karpenter) および RoleBinding (karpenter-dns) マニフェストファイルの作成
#---------------------------------------------------------------------------
# KubernetesのRoleBindingリソースを定義するYAMLファイルを作成するスクリプト。
# これは、ServiceAccount "karpenter" に Role "karpenter" の権限を付与。
# Karpenterコントローラーがリーダー選出関連の権限を行使するための役割バインディング。
#---------------------------------------------------------------------------
# - リソースの種類: RoleBinding (rbac.authorization.k8s.io/v1 APIグループ)
# - 名前: karpenter
# - 名前空間: karpenter
# - 役割参照: Role "karpenter"
# - 主体: ServiceAccount "karpenter" (名前空間: karpenter)
#---------------------------------------------------------------------------
# KubernetesのRoleBindingリソースを定義するYAMLファイルを作成するスクリプト。
# これは、ServiceAccount "karpenter" に Role "karpenter-dns" の権限を付与。
# Karpenterがkube-system名前空間内のDNSサービスと連携するための役割バインディング。
#---------------------------------------------------------------------------
# - リソースの種類: RoleBinding (rbac.authorization.k8s.io/v1 APIグループ)
# - 名前: karpenter-dns
# - 名前空間: kube-system
# - 役割参照: Role "karpenter-dns"
# - 主体: ServiceAccount "karpenter" (名前空間: karpenter)
#---------------------------------------------------------------------------

cat << 'EOF' > rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: karpenter
  namespace: karpenter
  labels:
    helm.sh/chart: karpenter-1.5.0
    app.kubernetes.io/name: karpenter
    app.kubernetes.io/instance: karpenter
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: karpenter
subjects:
  - kind: ServiceAccount
    name: karpenter
    namespace: karpenter
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: karpenter-dns
  namespace: kube-system
  labels:
    helm.sh/chart: karpenter-1.5.0
    app.kubernetes.io/name: karpenter
    app.kubernetes.io/instance: karpenter
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: karpenter-dns
subjects:
  - kind: ServiceAccount
    name: karpenter
    namespace: karpenter
EOF

kubectl delete -f rolebinding.yaml || true
kubectl apply -f rolebinding.yaml
kubectl get rolebinding karpenter -n karpenter
kubectl get rolebinding karpenter-dns -n kube-system

#---------------------------------------------------------------------------
# Service マニフェストファイルの作成
#---------------------------------------------------------------------------
# KubernetesのServiceリソースを定義するYAMLファイルを作成するスクリプト。
# Serviceは、Kubernetesクラスター内で実行されるPodのグループに対して、
# 一貫したネットワークアクセスを提供。
#---------------------------------------------------------------------------
# ここで作成されるServiceは、Karpenterコントローラーが公開するメトリクスエンドポイントへのアクセスを可能にする。
# Prometheusなどの監視ツールがKarpenterのパフォーマンスデータを収集するための窓口。
#---------------------------------------------------------------------------
# - リソースの種類: Service (v1 APIグループ)
# - 名前: karpenter
# - 名前空間: karpenter
# - タイプ: ClusterIP (クラスタ内部からのアクセスのみ許可)
# - ポート: 8080 (メトリクス用)
# - セレクター: 'app.kubernetes.io/name: karpenter' および 'app.kubernetes.io/instance: karpenter'
#               ラベルを持つPodを対象
#---------------------------------------------------------------------------

cat << 'EOF' > service.yaml
apiVersion: v1
kind: Service
metadata:
  name: karpenter
  namespace: karpenter
  labels:
    helm.sh/chart: karpenter-1.5.0
    app.kubernetes.io/name: karpenter
    app.kubernetes.io/instance: karpenter
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 8080
      targetPort: http-metrics
      protocol: TCP
  selector:
    app.kubernetes.io/name: karpenter
    app.kubernetes.io/instance: karpenter
EOF

kubectl delete -f service.yaml || true
kubectl apply -f service.yaml
kubectl get service karpenter -n karpenter

#---------------------------------------------------------------------------
# Deployment マニフェストファイルの作成
#---------------------------------------------------------------------------
# KubernetesのDeploymentリソースを定義するYAMLファイルを作成するスクリプト。
# Deploymentは、PodとReplicaSetの宣言的な更新を管理。
# アプリケーションのデプロイ、スケーリング、更新、ロールバックを自動化。
#---------------------------------------------------------------------------
# ここで作成されるDeploymentは、Karpenterコントローラー本体のデプロイメント定義。
# アプリケーションのイメージ、リソース要求、環境変数、ヘルスチェックなどの詳細設定を含む。
#---------------------------------------------------------------------------
# - リソースの種類: Deployment (apps/v1 APIグループ)
# - 名前: karpenter
# - 名前空間: karpenter
# - レプリカ数: 1 (replicas: 1)
# - 更新戦略: ローリングアップデート (maxUnavailable: 1)
# - コンテナ: 'controller'（Karpenterコントローラーイメージ）
# - 環境変数: クラスター名、ログレベル、メトリクスポート、ヘルスプローブポートなど、
#             Karpenterの動作に必要な各種設定
# - リソース制限: CPU、メモリのリミットとリクエスト
# - アフィニティ/トポロジースプレッド制約: ノードスケジューリングの最適化設定
#---------------------------------------------------------------------------

cat << 'EOF' > deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: karpenter
  namespace: karpenter
  labels:
    helm.sh/chart: karpenter-1.5.0
    app.kubernetes.io/name: karpenter
    app.kubernetes.io/instance: karpenter
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: karpenter
      app.kubernetes.io/instance: karpenter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: karpenter
        app.kubernetes.io/instance: karpenter
      annotations:
    spec:
      automountServiceAccountToken: true
      serviceAccountName: karpenter
      securityContext:
        fsGroup: 65532
        runAsNonRoot: false
        seccompProfile:
          type: RuntimeDefault
      priorityClassName: "system-cluster-critical"
      dnsPolicy: ClusterFirst
      schedulerName: "default-scheduler"
      containers:
        - name: controller
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65532
            runAsGroup: 65532
            capabilities:
              drop:
                - ALL
          image: public.ecr.aws/karpenter/controller:1.5.0@sha256:339aef3f5ecdf6f94d1c7cc9d0e1d359c281b4f9b842877bdbf2acd3fa360521
          imagePullPolicy: IfNotPresent
          env:
            - name: KUBERNETES_MIN_VERSION
              value: "1.19.0-0"
            - name: KARPENTER_SERVICE
              value: karpenter
            - name: LOG_LEVEL
              value: "info"
            - name: LOG_OUTPUT_PATHS
              value: "stdout"
            - name: LOG_ERROR_OUTPUT_PATHS
              value: "stderr"
            - name: METRICS_PORT
              value: "8080"
            - name: HEALTH_PROBE_PORT
              value: "8081"
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MEMORY_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: controller
                  divisor: "0"
                  resource: limits.memory
            - name: FEATURE_GATES
              value: "ReservedCapacity=false,SpotToSpotConsolidation=false,NodeRepair=false"
            - name: BATCH_MAX_DURATION
              value: "10s"
            - name: BATCH_IDLE_DURATION
              value: "1s"
            - name: PREFERENCE_POLICY
              value: "Respect"
            - name: CLUSTER_NAME
              value: "dev-ws-devops-eks"
            - name: VM_MEMORY_OVERHEAD_PERCENT
              value: "0.075"
            - name: RESERVED_ENIS
              value: "0"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: http
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            timeoutSeconds: 30
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            initialDelaySeconds: 5
            timeoutSeconds: 30
            httpGet:
              path: /readyz
              port: http
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 500Mi
          nodeSelector:
            kubernetes.io/os: linux
          # The template below patches the .Values.affinity to add a default label selector where not specificed
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: karpenter.sh/provisioner-name
                    operator: DoesNotExist
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: karpenter
                    app.kubernetes.io/name: karpenter
                topologyKey: kubernetes.io/hostname
          # The template below patches the .Values.topologySpreadConstraints to add a default label selector where not specificed
          topologySpreadConstraints:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: karpenter
                  app.kubernetes.io/name: karpenter
              maxSkew: 1
              topologyKey: topology.kubernetes.io/zone
              whenUnsatisfiable: DoNotSchedule
          tolerations:
            - key: CriticalAddonsOnly
              operator: Exists
EOF

kubectl delete -f deployment.yaml || true
kubectl apply -f deployment.yaml
kubectl get deployment karpenter -n karpenter