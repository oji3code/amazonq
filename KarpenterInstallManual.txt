#==========================================================
# Set environment variables
#==========================================================

export ENV="dev"
export PROJECT="ws-devops"
export PREFIX="${ENV}-${PROJECT}"
export CLUSTER_NAME="${PREFIX}-eks"
export KARPENTER_NODE_ROLE_NAME="${PREFIX}-karpenter-node-role"
export KARPENTER_NODE_INSTANCE_PROFILE_NAME="${PREFIX}-karpenter-node-instance-profile"
export KARPENTER_CONTROLLER_IAM_ROLE_NAME="${PREFIX}-karpenter-controller-role"
export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
export AWS_REGION=$(aws configure get region)

#==========================================================
# Create Karpenter Controller Policy
#==========================================================

# Create the policy document
cat > karpenter-controller-policy.json << 'EOF'
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ec2:CreateLaunchTemplate",
                "ec2:CreateFleet",
                "ec2:RunInstances",
                "ec2:CreateTags",
                "ec2:TerminateInstances",
                "ec2:DeleteLaunchTemplate",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeInstances",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeInstanceTypes",
                "ec2:DescribeInstanceTypeOfferings",
                "ec2:DescribeAvailabilityZones",
                "ec2:DescribeSpotPriceHistory",
                "pricing:GetProducts",
                "ssm:GetParameter",
                "iam:PassRole",
                "eks:DescribeCluster"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "sqs:DeleteMessage",
                "sqs:GetQueueUrl",
                "sqs:GetQueueAttributes",
                "sqs:ReceiveMessage"
            ],
            "Resource": "arn:aws:sqs:*:*:*-karpenter"
        },
        {
            "Effect": "Allow",
            "Action": [
                "events:CreateRule",
                "events:ListTargetsByRule",
                "events:PutTargets"
            ],
            "Resource": "*",
            "Condition": {
                "StringEquals": {
                    "events:source": "aws.ec2",
                    "events:detail-type": [
                        "EC2 Instance State-change Notification",
                        "EC2 Spot Instance Interruption Warning",
                        "EC2 Instance Rebalance Recommendation"
                    ]
                }
            }
        }
    ]
}
EOF

# Create the IAM policy
aws iam create-policy \
    --policy-name "${PREFIX}-karpenter-controller-policy" \
    --policy-document file://karpenter-controller-policy.json

# Create the trust policy for the controller IAM role
cat > karpenter-controller-trust-policy.json << EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Federated": "arn:aws:iam::${AWS_ACCOUNT_ID}:oidc-provider/$(aws eks describe-cluster --name ${CLUSTER_NAME} --query "cluster.identity.oidc.issuer" --output text | sed 's|https://||')"
      },
      "Action": "sts:AssumeRoleWithWebIdentity",
      "Condition": {
        "StringEquals": {
          "$(aws eks describe-cluster --name ${CLUSTER_NAME} --query "cluster.identity.oidc.issuer" --output text | sed 's|https://||'):sub": "system:serviceaccount:karpenter:karpenter"
        }
      }
    }
  ]
}
EOF

#==========================================================
# Create Karpenter Controller Role
#==========================================================

# Create the controller IAM role
aws iam create-role \
    --role-name ${KARPENTER_CONTROLLER_IAM_ROLE_NAME} \
    --assume-role-policy-document file://karpenter-controller-trust-policy.json

# Attach the policy to the controller role
aws iam attach-role-policy \
    --role-name ${KARPENTER_CONTROLLER_IAM_ROLE_NAME} \
    --policy-arn arn:aws:iam::${AWS_ACCOUNT_ID}:policy/${PREFIX}-karpenter-controller-policy

# Create the node role trust policy
cat > ec2-trust-policy.json << 'EOF'
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF

#==========================================================
# Create Karpenter Node Role(Karpenter Node Instance Profile)
#==========================================================

# Create the node role
aws iam create-role \
    --role-name ${KARPENTER_NODE_ROLE_NAME} \
    --assume-role-policy-document file://ec2-trust-policy.json

# Create the instance profile
aws iam create-instance-profile \
    --instance-profile-name ${KARPENTER_NODE_INSTANCE_PROFILE_NAME}

# Add the role to the instance profile
aws iam add-role-to-instance-profile \
    --instance-profile-name ${KARPENTER_NODE_INSTANCE_PROFILE_NAME} \
    --role-name ${KARPENTER_NODE_ROLE_NAME}

# Attach required policies to the node role
aws iam attach-role-policy \
    --role-name ${KARPENTER_NODE_ROLE_NAME} \
    --policy-arn arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy

aws iam attach-role-policy \
    --role-name ${KARPENTER_NODE_ROLE_NAME} \
    --policy-arn arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

aws iam attach-role-policy \
    --role-name ${KARPENTER_NODE_ROLE_NAME} \
    --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

aws iam attach-role-policy \
    --role-name ${KARPENTER_NODE_ROLE_NAME} \
    --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

#==========================================================
# Create the service-linked role for Spot instances
#==========================================================

aws iam create-service-linked-role --aws-service-name spot.amazonaws.com || true

#==========================================================
# Add tags to subnets and security groups
#==========================================================

# Get VPC ID
export VPC_ID=$(aws eks describe-cluster \
  --name ${CLUSTER_NAME} \
  --query "cluster.resourcesVpcConfig.vpcId" \
  --output text)
echo VPC_ID=${VPC_ID}

# Tag subnets
for SUBNET in $(aws ec2 describe-subnets \
  --filters "Name=vpc-id,Values=${VPC_ID}" \
            "Name=tag:Name,Values=${PREFIX}-private-*" \
  --query "Subnets[*].SubnetId" \
  --output text); do
  echo SUBNET=${SUBNET}
  aws ec2 create-tags \
    --resources ${SUBNET} \
    --tags "Key=karpenter.sh/discovery,Value=${CLUSTER_NAME}"
done

# Tag security groups
SECURITY_GROUP_ID=$(aws ec2 describe-security-groups \
  --filters "Name=group-name,Values=${PREFIX}-eks-node-group" \
  --query "SecurityGroups[0].GroupId" \
  --output text)
echo "SECURITY_GROUP_ID=${SECURITY_GROUP_ID}"

aws ec2 create-tags \
  --resources ${SECURITY_GROUP_ID} \
  --tags "Key=karpenter.sh/discovery,Value=${CLUSTER_NAME}"
