#==========================================================
# Create Karpenter NodePool
#==========================================================
cat <<EOF | kubectl apply -f -
apiVersion: karpenter.sh/v1beta1
kind: NodePool
metadata:
  name: ${PREFIX}-default
spec:
  template:
    spec:
      nodeClassRef:
        name: ${PREFIX}-default
      
      # Define requirements for the nodes
      requirements:
        # Use spot instances for cost savings
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["spot"]
        
        # Specify allowed instance types
        - key: node.kubernetes.io/instance-type
          operator: In
          values:
            - t3.medium
            - t3.large
            - m5.large
            - m5.xlarge
        
        # Specify architecture
        - key: kubernetes.io/arch
          operator: In
          values: ["amd64"]
        
        # Specify OS
        - key: kubernetes.io/os
          operator: In
          values: ["linux"]
        
        # Specify availability zones
        - key: topology.kubernetes.io/zone
          operator: In
          values: ["${AWS_REGION}a", "${AWS_REGION}b", "${AWS_REGION}c"]
  
  # Set resource limits for this NodePool
  limits:
    resources:
      cpu: 100       # Maximum 100 CPU cores across all nodes
      memory: 400Gi  # Maximum 400 GiB memory across all nodes
  
  # Configure disruption settings
  disruption:
    # Consolidate nodes when they're underutilized
    consolidationPolicy: WhenUnderutilized
    
    # Wait 30 seconds before consolidating
    consolidateAfter: 30s
    
    # Set node expiration time (24 hours)
    expireAfter: 24h
EOF

#==========================================================
# Create Karpenter EC2 Node Class
#==========================================================

cat <<EOF | kubectl apply -f -
apiVersion: karpenter.k8s.aws/v1beta1
kind: EC2NodeClass
metadata:
  name: ${PREFIX}-default
spec:
  # Specify the AMI family to use
  amiFamily: AL2  # Amazon Linux 2
  
  # Reference the IAM role created earlier
  role: ${PREFIX}-KarpenterNodeRole
  
  # Select subnets using the tags we applied
  subnetSelector:
    karpenter.sh/discovery: ${CLUSTER_NAME}
  
  # Select security groups using the tags we applied
  securityGroupSelector:
    karpenter.sh/discovery: ${CLUSTER_NAME}
  
  # Configure block device mappings
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 50Gi
        volumeType: gp3
        encrypted: true
  
  # Add tags to the EC2 instances
  tags:
    Name: ${PREFIX}-karpenter-node
    Environment: dev
    ManagedBy: karpenter
EOF